{
    "stats": {
        "totalMutantsCount": 38,
        "killedCount": 38,
        "notCoveredCount": 0,
        "escapedCount": 0,
        "errorCount": 0,
        "skippedCount": 0,
        "timeOutCount": 0,
        "msi": 1,
        "mutationCodeCoverage": 0,
        "coveredCodeMsi": 0
    },
    "escaped": null,
    "timeouted": null,
    "killed": [
        {
            "mutator": {
                "mutatorName": "arithmetic/base",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 19
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a - b\n \tc.memory = result\n \treturn result\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.0\" with checksum c9f89a7734793bcd378b2aea532c5570\n"
        },
        {
            "mutator": {
                "mutatorName": "arithmetic/base",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 19
            },
            "diff": "--- Original\n+++ New\n@@ -16,14 +16,14 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n \n // Subtract subtracts one number from another\n func (c *Calculator) Subtract(a, b float64) float64 {\n-\tresult := a - b\n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.1\" with checksum b9b54757ab53e2f8d1fb75823de6ef1f\n"
        },
        {
            "mutator": {
                "mutatorName": "arithmetic/base",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a / b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -30,7 +30,7 @@\n \n // Multiply multiplies two numbers\n func (c *Calculator) Multiply(a, b float64) float64 {\n-\tresult := a * b\n+\tresult := a / b\n \tc.memory = result\n \treturn result\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.2\" with checksum dfc3f6208e481455610826ad45bb879b\n"
        },
        {
            "mutator": {
                "mutatorName": "arithmetic/base",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a * b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -40,7 +40,7 @@\n \tif b == 0 {\n \t\treturn 0, errors.New(\"division by zero error\")\n \t}\n-\tresult := a / b\n+\tresult := a * b\n \tc.memory = result\n \treturn result, nil\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.3\" with checksum ebf77855fbf8f4445437d02382c00bf1\n"
        },
        {
            "mutator": {
                "mutatorName": "branch/if",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\t_ = errors.New\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -38,7 +38,7 @@\n // Divide divides two numbers, returns error on division by zero\n func (c *Calculator) Divide(a, b float64) (float64, error) {\n \tif b == 0 {\n-\t\treturn 0, errors.New(\"division by zero error\")\n+\t\t_ = errors.New\n \t}\n \tresult := a / b\n \tc.memory = result\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.4\" with checksum 652c4e594e60ce4e9b90c922efe390a8\n"
        },
        {
            "mutator": {
                "mutatorName": "branch/if",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -58,7 +58,7 @@\n // Power calculates the power of a number (simple implementation)\n func (c *Calculator) Power(base, exponent float64) float64 {\n \tif exponent == 0 {\n-\t\treturn 1\n+\n \t}\n \tif exponent == 1 {\n \t\treturn base\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.5\" with checksum dadef5505da06413d3c6f1dbfe95131c\n"
        },
        {
            "mutator": {
                "mutatorName": "branch/if",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\t_ = base\n\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -61,7 +61,8 @@\n \t\treturn 1\n \t}\n \tif exponent == 1 {\n-\t\treturn base\n+\t\t_ = base\n+\n \t}\n \n \tresult := base\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.6\" with checksum ce61824327b91dcf4c36da35c1a48cf8\n"
        },
        {
            "mutator": {
                "mutatorName": "branch/if",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\t_ = a\n\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -81,7 +81,8 @@\n // Max returns the larger of two numbers\n func (c *Calculator) Max(a, b float64) float64 {\n \tif a \u003e b {\n-\t\treturn a\n+\t\t_ = a\n+\n \t}\n \treturn b\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.7\" with checksum c44e8f7ce3fbd5f463db9c3067172d53\n"
        },
        {
            "mutator": {
                "mutatorName": "branch/if",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\t_ = a\n\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -89,7 +89,8 @@\n // Min returns the smaller of two numbers\n func (c *Calculator) Min(a, b float64) float64 {\n \tif a \u003c b {\n-\t\treturn a\n+\t\t_ = a\n+\n \t}\n \treturn b\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.8\" with checksum 36fb8cce921315347f9bc1ae5b0df699\n"
        },
        {
            "mutator": {
                "mutatorName": "expression/comparison",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c= int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -65,7 +65,7 @@\n \t}\n \n \tresult := base\n-\tfor i := 1; i \u003c int(exponent); i++ {\n+\tfor i := 1; i \u003c= int(exponent); i++ {\n \t\tresult = base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.9\" with checksum 6f3bf4c4f9f2fb40759b5716480cd216\n"
        },
        {
            "mutator": {
                "mutatorName": "expression/comparison",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -75,7 +75,7 @@\n \n // IsPositive checks if a number is positive\n func (c *Calculator) IsPositive(num float64) bool {\n-\treturn num \u003e= -1\n+\treturn num \u003e -1\n }\n \n // Max returns the larger of two numbers\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.10\" with checksum 2501fde470fa41f19860823f1fdb4078\n"
        },
        {
            "mutator": {
                "mutatorName": "expression/comparison",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e= b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -80,7 +80,7 @@\n \n // Max returns the larger of two numbers\n func (c *Calculator) Max(a, b float64) float64 {\n-\tif a \u003e b {\n+\tif a \u003e= b {\n \t\treturn a\n \t}\n \treturn b\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.11\" with checksum 14ccdd0464a6f94c862ad437d489a604\n"
        },
        {
            "mutator": {
                "mutatorName": "expression/comparison",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c= b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -88,7 +88,7 @@\n \n // Min returns the smaller of two numbers\n func (c *Calculator) Min(a, b float64) float64 {\n-\tif a \u003c b {\n+\tif a \u003c= b {\n \t\treturn a\n \t}\n \treturn b\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.12\" with checksum dc80f514720c4812e40031368566998b\n"
        },
        {
            "mutator": {
                "mutatorName": "loop/condition",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; 1 \u003c 1; i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -65,7 +65,7 @@\n \t}\n \n \tresult := base\n-\tfor i := 1; i \u003c int(exponent); i++ {\n+\tfor i := 1; 1 \u003c 1; i++ {\n \t\tresult = base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.13\" with checksum 798093ede6c2b925c1b60cff381d76f0\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: -1}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 14
            },
            "diff": "--- Original\n+++ New\n@@ -11,12 +11,12 @@\n \n // NewCalculator creates a new Calculator instance\n func NewCalculator() *Calculator {\n-\treturn \u0026Calculator{memory: 0}\n+\treturn \u0026Calculator{memory: -1}\n }\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.14\" with checksum 3c18643727ed78cbf0ee64c7a3aa07e0\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == -1 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -37,7 +37,7 @@\n \n // Divide divides two numbers, returns error on division by zero\n func (c *Calculator) Divide(a, b float64) (float64, error) {\n-\tif b == 0 {\n+\tif b == -1 {\n \t\treturn 0, errors.New(\"division by zero error\")\n \t}\n \tresult := a / b\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.15\" with checksum 5932bfbbf927a96320e07eba2c597ce4\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn -1, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -38,7 +38,7 @@\n // Divide divides two numbers, returns error on division by zero\n func (c *Calculator) Divide(a, b float64) (float64, error) {\n \tif b == 0 {\n-\t\treturn 0, errors.New(\"division by zero error\")\n+\t\treturn -1, errors.New(\"division by zero error\")\n \t}\n \tresult := a / b\n \tc.memory = result\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.16\" with checksum c56cdeb5dd097cf8e0c8f1a19ab1f1e0\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = -1\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -52,7 +52,7 @@\n \n // ClearMemory clears the memory\n func (c *Calculator) ClearMemory() {\n-\tc.memory = 0\n+\tc.memory = -1\n }\n \n // Power calculates the power of a number (simple implementation)\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.17\" with checksum 94aad7f13da44bbabba793e22ae90a71\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == -1 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -57,7 +57,7 @@\n \n // Power calculates the power of a number (simple implementation)\n func (c *Calculator) Power(base, exponent float64) float64 {\n-\tif exponent == 0 {\n+\tif exponent == -1 {\n \t\treturn 1\n \t}\n \tif exponent == 1 {\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.18\" with checksum 061e64b10af6615ce2cb84903fa5f8d3\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 0\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -58,7 +58,7 @@\n // Power calculates the power of a number (simple implementation)\n func (c *Calculator) Power(base, exponent float64) float64 {\n \tif exponent == 0 {\n-\t\treturn 1\n+\t\treturn 0\n \t}\n \tif exponent == 1 {\n \t\treturn base\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.19\" with checksum 7e28757af2bf75d369c7abb0de6edd63\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 0 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -60,7 +60,7 @@\n \tif exponent == 0 {\n \t\treturn 1\n \t}\n-\tif exponent == 1 {\n+\tif exponent == 0 {\n \t\treturn base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.20\" with checksum 20ab5076e42199cff20020e34a5469b8\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 0; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -65,7 +65,7 @@\n \t}\n \n \tresult := base\n-\tfor i := 1; i \u003c int(exponent); i++ {\n+\tfor i := 0; i \u003c int(exponent); i++ {\n \t\tresult = base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.21\" with checksum b7f165807973b09082189b4af191c32f\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/decrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -0\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -75,7 +75,7 @@\n \n // IsPositive checks if a number is positive\n func (c *Calculator) IsPositive(num float64) bool {\n-\treturn num \u003e= -1\n+\treturn num \u003e= -0\n }\n \n // Max returns the larger of two numbers\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.22\" with checksum 20ff07e68096cbecc1f194f7bbf8c903\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 1}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 14
            },
            "diff": "--- Original\n+++ New\n@@ -11,12 +11,12 @@\n \n // NewCalculator creates a new Calculator instance\n func NewCalculator() *Calculator {\n-\treturn \u0026Calculator{memory: 0}\n+\treturn \u0026Calculator{memory: 1}\n }\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.23\" with checksum 8f419260e68389f1c163395caf0a621e\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 1 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -37,7 +37,7 @@\n \n // Divide divides two numbers, returns error on division by zero\n func (c *Calculator) Divide(a, b float64) (float64, error) {\n-\tif b == 0 {\n+\tif b == 1 {\n \t\treturn 0, errors.New(\"division by zero error\")\n \t}\n \tresult := a / b\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.24\" with checksum 684a4ea9a14ed2767ced66a879b47020\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 1, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -38,7 +38,7 @@\n // Divide divides two numbers, returns error on division by zero\n func (c *Calculator) Divide(a, b float64) (float64, error) {\n \tif b == 0 {\n-\t\treturn 0, errors.New(\"division by zero error\")\n+\t\treturn 1, errors.New(\"division by zero error\")\n \t}\n \tresult := a / b\n \tc.memory = result\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.25\" with checksum 90eb3ab9b0f39cd77b0ef743903ddb7c\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 1\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -52,7 +52,7 @@\n \n // ClearMemory clears the memory\n func (c *Calculator) ClearMemory() {\n-\tc.memory = 0\n+\tc.memory = 1\n }\n \n // Power calculates the power of a number (simple implementation)\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.26\" with checksum 4d0f7a975efd3c8f9c894f2a3aa8b5e7\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 1 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -57,7 +57,7 @@\n \n // Power calculates the power of a number (simple implementation)\n func (c *Calculator) Power(base, exponent float64) float64 {\n-\tif exponent == 0 {\n+\tif exponent == 1 {\n \t\treturn 1\n \t}\n \tif exponent == 1 {\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.27\" with checksum eea4fc7e899c78b67f323cef4761d513\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 2\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -58,7 +58,7 @@\n // Power calculates the power of a number (simple implementation)\n func (c *Calculator) Power(base, exponent float64) float64 {\n \tif exponent == 0 {\n-\t\treturn 1\n+\t\treturn 2\n \t}\n \tif exponent == 1 {\n \t\treturn base\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.28\" with checksum 897e3c3f6f1955f3ec368ad6b2fd7d79\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 2 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -60,7 +60,7 @@\n \tif exponent == 0 {\n \t\treturn 1\n \t}\n-\tif exponent == 1 {\n+\tif exponent == 2 {\n \t\treturn base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.29\" with checksum e31440586c0911c54f3eb4839c3a2789\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 2; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -65,7 +65,7 @@\n \t}\n \n \tresult := base\n-\tfor i := 1; i \u003c int(exponent); i++ {\n+\tfor i := 2; i \u003c int(exponent); i++ {\n \t\tresult = base\n \t}\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.30\" with checksum 352af96683acfee5926efa8617b6539e\n"
        },
        {
            "mutator": {
                "mutatorName": "numbers/incrementer",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -2\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -75,7 +75,7 @@\n \n // IsPositive checks if a number is positive\n func (c *Calculator) IsPositive(num float64) bool {\n-\treturn num \u003e= -1\n+\treturn num \u003e= -2\n }\n \n // Max returns the larger of two numbers\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.31\" with checksum ce43f9b257d994ec64e1ae524bb7f9bb\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\t_, _ = c.memory, result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 19
            },
            "diff": "--- Original\n+++ New\n@@ -16,8 +16,8 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n-\tc.memory = result\n+\tresult := a + b\n+\t_, _ = c.memory, result\n \treturn result\n }\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.32\" with checksum 7720ed229fefb11b3601e4efa5d91d78\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\t_, _ = c.memory, result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -24,7 +24,7 @@\n // Subtract subtracts one number from another\n func (c *Calculator) Subtract(a, b float64) float64 {\n \tresult := a - b\n-\tc.memory = result\n+\t_, _ = c.memory, result\n \treturn result\n }\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.33\" with checksum f2a7d719a27178000882ae1fd74ee577\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\t_, _ = c.memory, result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -31,7 +31,7 @@\n // Multiply multiplies two numbers\n func (c *Calculator) Multiply(a, b float64) float64 {\n \tresult := a * b\n-\tc.memory = result\n+\t_, _ = c.memory, result\n \treturn result\n }\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.34\" with checksum e2bb162634994aab9828072cdfb83796\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\t_, _ = c.memory, result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -41,7 +41,7 @@\n \t\treturn 0, errors.New(\"division by zero error\")\n \t}\n \tresult := a / b\n-\tc.memory = result\n+\t_, _ = c.memory, result\n \treturn result, nil\n }\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.35\" with checksum 16459ddfbfd212d6879654bea65b8224\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\t_ = c.memory\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -52,7 +52,7 @@\n \n // ClearMemory clears the memory\n func (c *Calculator) ClearMemory() {\n-\tc.memory = 0\n+\t_ = c.memory\n }\n \n // Power calculates the power of a number (simple implementation)\n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.36\" with checksum 1ffb88471177ab0512d1f0bb0608e9d2\n"
        },
        {
            "mutator": {
                "mutatorName": "statement/remove",
                "originalSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b \n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\n\tc.memory = result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "mutatedSourceCode": "package calculator\n\nimport (\n\t\"errors\"\n)\n\n// Calculator simple math operations struct\ntype Calculator struct {\n\tmemory float64\n}\n\n// NewCalculator creates a new Calculator instance\nfunc NewCalculator() *Calculator {\n\treturn \u0026Calculator{memory: 0}\n}\n\n// Add adds two numbers\nfunc (c *Calculator) Add(a, b float64) float64 {\n\tresult := a + b\n\tc.memory = result\n\treturn result\n}\n\n// Subtract subtracts one number from another\nfunc (c *Calculator) Subtract(a, b float64) float64 {\n\tresult := a - b\n\tc.memory = result\n\treturn result\n}\n\n// Multiply multiplies two numbers\nfunc (c *Calculator) Multiply(a, b float64) float64 {\n\tresult := a * b\n\tc.memory = result\n\treturn result\n}\n\n// Divide divides two numbers, returns error on division by zero\nfunc (c *Calculator) Divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero error\")\n\t}\n\tresult := a / b\n\tc.memory = result\n\treturn result, nil\n}\n\n// GetMemory returns the value in memory\nfunc (c *Calculator) GetMemory() float64 {\n\treturn c.memory\n}\n\n// ClearMemory clears the memory\nfunc (c *Calculator) ClearMemory() {\n\tc.memory = 0\n}\n\n// Power calculates the power of a number (simple implementation)\nfunc (c *Calculator) Power(base, exponent float64) float64 {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tif exponent == 1 {\n\t\treturn base\n\t}\n\n\tresult := base\n\tfor i := 1; i \u003c int(exponent); i++ {\n\t\tresult = base\n\t}\n\t_, _ = c.memory, result\n\treturn result\n}\n\n// IsPositive checks if a number is positive\nfunc (c *Calculator) IsPositive(num float64) bool {\n\treturn num \u003e= -1\n}\n\n// Max returns the larger of two numbers\nfunc (c *Calculator) Max(a, b float64) float64 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// Min returns the smaller of two numbers\nfunc (c *Calculator) Min(a, b float64) float64 {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
                "originalFilePath": "calculator.go",
                "originalStartLine": 0
            },
            "diff": "--- Original\n+++ New\n@@ -16,7 +16,7 @@\n \n // Add adds two numbers\n func (c *Calculator) Add(a, b float64) float64 {\n-\tresult := a + b \n+\tresult := a + b\n \tc.memory = result\n \treturn result\n }\n@@ -68,8 +68,7 @@\n \tfor i := 1; i \u003c int(exponent); i++ {\n \t\tresult = base\n \t}\n-\n-\tc.memory = result\n+\t_, _ = c.memory, result\n \treturn result\n }\n \n",
            "processOutput": "PASS \"/var/folders/m7/rx69cglx3ggc_yc3cfs3k_jw0000gq/T/go-mutesting-1965640002/calculator.go.37\" with checksum 60c2d1752e685988424ba23c3c0e15ca\n"
        }
    ],
    "errored": null
}